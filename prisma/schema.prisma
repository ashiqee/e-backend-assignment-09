// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  fullName           String
  profilePhoto       String?
  contactNumber      String?
  address            String?
  password           String
  isDeleted          Boolean @default(false)
  role               UserRole     @default(CUSTOMER)
  needPasswordChange Boolean      @default(true)
  status             UserStatus   @default(ACTIVE)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  orders             Order[]
  reviews            Review[]
  cartItems          CartItem[]
  followedShops      VendorShop[] @relation("UserFollowedShops")
  vendorShops        VendorShop[]
  recentProducts     RecentProduct[]

  @@index([email])
  @@index([status])
  @@map("users")
}

model VendorShop {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  logo         String?
  description String?
  ownerId     String
  status      VendorShopStatus @default(ACTIVE)
  isDeleted   Boolean @default(false)
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products    Product[]
  followers   User[]    @relation("UserFollowedShops")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt


  @@index([name])
  @@map("vendorshop")
}

enum VendorShopStatus {
  ACTIVE
  BLACKLISTED
}
 
model Product {
  id             Int         @id @default(autoincrement())
  name           String
  price          Float
  description    String
  images         String[]
  flashSale     Boolean @default(false)
  salesQty        Int   @default(0)
  inventoryCount Int  @default(0)
  discount       Float? @default(0)
  isDeleted      Boolean @default(false)
  categoryId     Int
  category       Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  vendorShopId   Int
  vendorShop     VendorShop  @relation(fields: [vendorShopId], references: [id], onDelete:Cascade)
  reviews        Review[]
  cartItems      CartItem[]
  recentProducts RecentProduct[]
  OrderItem      OrderItem[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("products")
}

model RecentProduct {
  id String @id @unique @default(uuid())
  userId String @unique
  productId Int @unique
  view DateTime @default(now())

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId],references: [id] , onDelete: Cascade)

  @@unique([userId,productId])
  @@map("recent_products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String     @unique
  image     String?
  description String?
  isDeleted  Boolean @default(false)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
  @@map("categories")
}

model Order {
  id            Int            @id @default(autoincrement())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPrice    Float
  paymentStatus PaymentStatus  @default(UNPAID)
  transactionId String?
  paymentMethod String?
  orderStatus   OrderStatus    @default(PENDING)
  orderItems    OrderItem[]
  fullName      String         // Receiver's full name
  mobile        String         // Receiver's mobile number
  address       String         // Shipping address
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("orders")
}


enum PaymentStatus {
  UNPAID
  PAID
}


model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float

  @@map("orderItems")
}



model CartItem {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  @@unique([userId, productId]) 
  @@map("cartItems")
}

model Coupon {
  id                 Int      @id @default(autoincrement())
  code               String   @unique
  discountPercentage Float
  expirationDate     DateTime
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("coupon")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum UserStatus {
  ACTIVE
  SUSPEND
}
